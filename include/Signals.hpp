#pragma once

#include <map>
#include <string>

namespace yaodaq
{

  enum class SEVERITY
  {
    Info=1,
    Warning=10,
    Error=100,
    Critical=1000
  };

  enum class SIGNAL
  {
    NO=0, //No Signal.
    // Critical
    ABRT=int(SEVERITY::Critical)+1, //(Signal Abort) Abnormal termination, such as is initiated by the abort function.
    FPE=int(SEVERITY::Critical)+2, //(Signal Floating-Point Exception) Erroneous arithmetic operation, such as zero divide or an operation resulting in overflow (not necessarily with a floating-point operation).
    ILL=int(SEVERITY::Critical)+3, //(Signal Illegal Instruction) Invalid function image, such as an illegal instruction. This is generally due to a corruption in the code or to an attempt to execute data.
    SEGV=int(SEVERITY::Critical)+4, //(Signal Segmentation Violation) Invalid access to storage: When a program tries to read or write outside the memory it has allocated.
    // Warning
    INT=int(SEVERITY::Warning)+1, //(Signal Interrupt) Interactive attention signal. Generally generated by the application user.
    TERM=int(SEVERITY::Warning)+2 //(Signal Terminate) Termination request sent to program.
  };

  static std::map<SIGNAL,std::string> SignalName{{SIGNAL::NO,"SIGNO"},{SIGNAL::ABRT,"SIGABRT"},{SIGNAL::FPE,"SIGFPE"},{SIGNAL::ILL,"SIGILL"},{SIGNAL::SEGV,"SIGSEGV"},{SIGNAL::INT,"SIGINT"},{SIGNAL::TERM,"SIGTERM"}};
};
